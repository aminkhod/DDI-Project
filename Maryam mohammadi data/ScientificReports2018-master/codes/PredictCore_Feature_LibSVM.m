function [Predicted_Scores ] = PredictCore_Feature_LibSVM(...
    TrnLabels,TstLabels,Feature_Mat_trn, Feature_Mat_tst, option)

% % Usage: svm-train [options] training_set_file [model_file]
% % options:
% % -s svm_type : set type of SVM (default 0)
% %     0 -- C-SVC      (multi-class classification)
% %     1 -- nu-SVC     (multi-class classification)
% %     2 -- one-class SVM 
% %     3 -- epsilon-SVR    (regression)
% %     4 -- nu-SVR     (regression)
% % -t kernel_type : set type of kernel function (default 2)
% %     0 -- linear: u'*v
% %     1 -- polynomial: (gamma*u'*v + coef0)^degree
% %     2 -- radial basis function: exp(-gamma*|u-v|^2)
% %     3 -- sigmoid: tanh(gamma*u'*v + coef0)
% %     4 -- precomputed kernel (kernel values in training_set_file)
% % -d degree : set degree in kernel function (default 3)
% % -g gamma : set gamma in kernel function (default 1/num_features)
% % -r coef0 : set coef0 in kernel function (default 0)
% % -c cost : set the parameter C of C-SVC, epsilon-SVR, and nu-SVR (default 1)
% % -n nu : set the parameter nu of nu-SVC, one-class SVM, and nu-SVR (default 0.5)
% % -p epsilon : set the epsilon in loss function of epsilon-SVR (default 0.1)
% % -m cachesize : set cache memory size in MB (default 100)
% % -e epsilon : set tolerance of termination criterion (default 0.001)
% % -h shrinking : whether to use the shrinking heuristics, 0 or 1 (default 1)
% % -b probability_estimates : whether to train a SVC or SVR model for probability estimates, 0 or 1 (default 0)
% % -wi weight : set the parameter C of class i to weight*C, for C-SVC (default 1)
% % -v n: n-fold cross validation mode
% % -q : quiet mode (no outputs)

% TODO: scale
% [Feature_Mat_trn,Feature_Mat_tst]= NormalizeMatByCol(Feature_Mat_trn, Feature_Mat_tst);
%
% matlab> model = svmtrain(training_label_vector, training_instance_matrix [, 'libsvm_options']);
%
%         -training_label_vector:
%             An m by 1 vector of training labels (type must be double).
%         -training_instance_matrix:
%             An m by n matrix of m training instances with n features.
%             It can be dense or sparse (type must be double).
%         -libsvm_options:
%             A string of training options in the same format as that of LIBSVM.
% %
if nargin <5
    option.C=1;
    option.g = 0.01;
end
% w1= 1/( length( find(TrnLabels==1) ) / length(TrnLabels));
% w2= 1/( length( find(TrnLabels==0) ) / length(TrnLabels));
w1=1;w2=1;
% RBF
% % str_Option = ['-s 0 -t 2 -c 10 -g 0.001 -b 1 ',sprintf('-w1 %f ',w1),sprintf('-w2 %f ',w2), '-q'];
str_Option = ['-s 0 -t 2',sprintf(' -c %f ',option.C),sprintf(' -g %f ',option.g),sprintf(' -w1 %f',w1),sprintf(' -w2 %f',w2), ' -b 1 -q'];
model = svmtrain(TrnLabels, Feature_Mat_trn, str_Option); % 
%

% % `svm-predict' Usage
% % ===================
% %
% % Usage: svm-predict [options] test_file model_file output_file
% % options:
% % -b probability_estimates: whether to predict probability estimates, 0 or 1 (default 0); for one-class SVM only 0 is supported
% %
% % model_file is the model file generated by svm-train.
% % test_file is the test data you want to predict.
% % svm-predict will produce output in the output_file.
% %
% matlab> [predicted_label, accuracy, decision_values/prob_estimates] = svmpredict(testing_label_vector, testing_instance_matrix, model [, 'libsvm_options']);
% matlab> [predicted_label] = svmpredict(testing_label_vector, testing_instance_matrix, model [, 'libsvm_options']);
%
%         -testing_label_vector:
%             An m by 1 vector of prediction labels. If labels of test
%             data are unknown, simply use any random values. (type must be double)
%         -testing_instance_matrix:
%             An m by n matrix of m testing instances with n features.
%             It can be dense or sparse. (type must be double)
%         -model:
%             The output of svmtrain.
%         -libsvm_options:
%             A string of testing options in the same format as that of LIBSVM.
[predicted_label, accuracy, dec_values_P] = svmpredict(TstLabels, Feature_Mat_tst, model,'-b 1 -q' ); % [, 'liblinear_options', 'col']
% Outputs_ = decision_values(:,model.Label ==1) ; % being positive
% Outputs_ = dec_values_P(:,model.Label ==1) ; % being positive
if isempty( find(TrnLabels ==1))
    Predicted_Scores = 1-dec_values_P(:,model.Label ~=1) ; % being positive, safe way for the case of no positve when training
else
    Predicted_Scores  = dec_values_P(:,model.Label ==1) ;  % being positive
end
 

% % Result of Prediction

% % ====================

% %

% % The function 'predict' has three outputs.

% % The first one, predicted_label, is a vector of predicted labels.

% % The second output, accuracy, is a vector including accuracy (for classification), mean  squared error, and squared correlation coefficient (for regression).

% % The third is a matrix containing decision values or probability estimates (if '-b 1' is specified).

% %

% % If k is the number of classes

% % and k' is the number of classifiers (k'=1 if k=2, otherwise k'=k, one-vs-all strategy), for decision values,

% % each row includes results of k' binary linear classifiers. For probabilities,

% % each row contains k values indicating the probability that the testing instance is in

% % each class.

% Note that the order of classes here is the same as 'Label'  field in the model structure.