function [Predicted_Scores ] = PredictCore_Feature_LibSVM_PreKernel(TrnLabel,TstLabel,TrnSimMat, TstSimMat, C)
% % Usage: svm-train [options] training_set_file [model_file] TrnSimMat,TstSimMat
% % options:
% % -s svm_type : set type of SVM (default 0)
% %     0 -- C-SVC      (multi-class classification)
% %     1 -- nu-SVC     (multi-class classification)
% %     2 -- one-class SVM 
% %     3 -- epsilon-SVR    (regression)
% %     4 -- nu-SVR     (regression)
% % -t kernel_type : set type of kernel function (default 2)
% %     0 -- linear: u'*v
% %     1 -- polynomial: (gamma*u'*v + coef0)^degree
% %     2 -- radial basis function: exp(-gamma*|u-v|^2)
% %     3 -- sigmoid: tanh(gamma*u'*v + coef0)
% %     4 -- precomputed kernel (kernel values in training_set_file)
% % -d degree : set degree in kernel function (default 3)
% % -g gamma : set gamma in kernel function (default 1/num_features)
% % -r coef0 : set coef0 in kernel function (default 0)
% % -c cost : set the parameter C of C-SVC, epsilon-SVR, and nu-SVR (default 1)
% % -n nu : set the parameter nu of nu-SVC, one-class SVM, and nu-SVR (default 0.5)
% % -p epsilon : set the epsilon in loss function of epsilon-SVR (default 0.1)
% % -m cachesize : set cache memory size in MB (default 100)
% % -e epsilon : set tolerance of termination criterion (default 0.001)
% % -h shrinking : whether to use the shrinking heuristics, 0 or 1 (default 1)
% % -b probability_estimates : whether to train a SVC or SVR model for probability estimates, 0 or 1 (default 0)
% % -wi weight : set the parameter C of class i to weight*C, for C-SVC (default 1)
% % -v n: n-fold cross validation mode
% % -q : quiet mode (no outputs)

% TODO: scale
% [TrnSimMat,TstSimMat]= NormalizeMatByCol(TrnSimMat, TstSimMat);

%
% matlab> model = svmtrain(training_label_vector, training_instance_matrix [, 'libsvm_options']);
%
%         -training_label_vector:
%             An m by 1 vector of training labels (type must be double).
%         -training_instance_matrix:
%             An m by n matrix of m training instances with n features.
%             It can be dense or sparse (type must be double).
%         -libsvm_options:
%             A string of training options in the same format as that of LIBSVM.
% w1= 1/( length( find(TrnLabel==1) ) / length(TrnLabel));
% w2= 1/( length( find(TrnLabel==0) ) / length(TrnLabel));

w1=1;w2=1;

% RBF kernel function
% % str_Option = ['-s 0 -t 2 -c 10 -g 0.001 -b 1 ',sprintf('-w1 %f ',w1),sprintf('-w2 %f ',w2), '-q'];
% model = svmtrain(TrnLabel, TrnSimMat,str_Option); % 

if nargin <5
    C = 1; disp(C); % default
end
str_Option = ['-s 0 -t 4 ', sprintf('-c %f ',C), ' -b 1 ',sprintf('-w1 %f ',w1),sprintf('-w2 %f ',w2), '-q'];
% disp(str_Option);

model_precomputed = svmtrain(TrnLabel, [(1:size(TrnLabel,1))', TrnSimMat], str_Option ); % 

%
% % `svm-predict' Usage
% % ===================
% % Usage: svm-predict [options] test_file model_file output_file
% % options:
% % -b probability_estimates: whether to predict probability estimates, 0 or 1 (default 0); for one-class SVM only 0 is supported
% %
% % model_file is the model file generated by svm-train.
% % test_file is the test data you want to predict.
% % svm-predict will produce output in the output_file.
% %
% matlab> [predicted_label, accuracy, decision_values/prob_estimates] = svmpredict(testing_label_vector, testing_instance_matrix, model [, 'libsvm_options']);
% matlab> [predicted_label] = svmpredict(testing_label_vector, testing_instance_matrix, model [, 'libsvm_options']);
%
%         -testing_label_vector:
%             An m by 1 vector of prediction labels. If labels of test
%             data are unknown, simply use any random values. (type must be double)
%         -testing_instance_matrix:
%             An m by n matrix of m testing instances with n features.
%             It can be dense or sparse. (type must be double)
%         -model:
%             The output of svmtrain.
%         -libsvm_options:
%             A string of testing options in the same format as that of LIBSVM.

[predict_label_P, accuracy_P, dec_values_P] = svmpredict(TstLabel, [(1:size(TstLabel,1))', TstSimMat], model_precomputed,'-b 1 -q');
 
if isempty( find(TrnLabel ==1))
    Predicted_Scores = 1-dec_values_P(:,model_precomputed.Label ~=1) ; % being positive, safe way for the case of no positve when training
else
    Predicted_Scores  = dec_values_P(:,model_precomputed.Label ==1) ;  % being positive
end
% % Result of Prediction
% % ====================
% %
% % The function 'predict' has three outputs.
% % The first one, predicted_label, is a vector of predicted labels.
% % The second output, accuracy, is a vector including accuracy (for classification), mean  squared error, and squared correlation coefficient (for regression).
% % The third is a matrix containing decision values or probability estimates (if '-b 1' is specified).
% %
% % If k is the number of classes
% % and k' is the number of classifiers (k'=1 if k=2, otherwise k'=k, one-vs-all strategy), for decision values,
% % each row includes results of k' binary linear classifiers. For probabilities,
% % each row contains k values indicating the probability that the testing instance is in
% % each class.
% Note that the order of classes here is the same as 'Label'  field in the model structure.

 


